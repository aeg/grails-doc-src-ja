{hidden}
h4. Overview
{hidden}
h4. 概要

{hidden}
{note}
The mocking support described here is best used when testing non-domain artifacts that use domain classes, to let you focus on testing the artifact without needing a database. But when testing persistence it's best to use integration tests which configure Hibernate and use a database.
{note}
{hidden}

{note}
モック機能のサポートは、非ドメインクラスがドメインクラスを使用している場合に、データベースを必要とせず、テストに集中できるという意味では最適な方法です。しかし、ドメインの永続化のテストを行いたい場合はHibernateとデータベースを使用するIntegrationテストが最適な方法です。
{note}

{hidden}
Domain class interaction can be tested without involving a database connection using @DomainClassUnitTestMixin@. This implementation mimics the behavior of GORM against an in-memory @ConcurrentHashMap@ implementation. Note that this has limitations compared to a real GORM implementation. The following features of GORM for Hibernate can only be tested within an integration test:
{hidden}

ドメインクラスとしての振る舞いは@DomainClassUnitTestMixin@を使用することで、データベースを必要とせずにテストを行うことができます。この実装はGORMの振る舞いを擬似した、メモリ上の@ConcurrentHashMap@です。この実装は実際のGORMの動作と比べて制限があることに注意してください。以下のHibernateに対するGORMの機能はIntegrationテストでのみテストできます。

{hidden}
* String-based HQL queries
* composite identifiers
* dirty checking methods
* any direct interaction with Hibernate
{hidden}

* 文字列ベースのHQLクエリ
* 複合主キー
* dirtyチェックメソッド
* Hibernateの直接操作

{hidden}
However a large, commonly-used portion of the GORM API can be mocked using @DomainClassUnitTestMixin@ including:
{hidden}

上記以外の、よく使用されるGORM APIの大部分は@DomainClassUnitTestMixin@を使用することでモック化することができます。

{hidden}
* Simple persistence methods like @save()@, @delete()@ etc.
* Dynamic Finders
* Named Queries
* Query-by-example
* GORM Events
{hidden}

* @save()@や@delete()@といった永続化メソッド
* ダイナミックファインダー
* 名前付きクエリ
* Exampleによるクエリ
* GORMのイベント

{hidden}
If something isn't supported then @GrailsUnitTestMixin@'s @mockFor@ method can come in handy to mock the missing pieces. Alternatively you can write an integration test which bootstraps the complete Grails environment at a cost of test execution time.
{hidden}

もしサポートされてない部分があった場合でも、@GrailsUnitTestMixin@の@mockFor@メソッドを使用することで足りない部分をモック化することができます。または、テストの実行時間はかかりますが、完全にGrails環境が立ち上がるIntegrationテストを使用することもできます。

{hidden}
h4. The Basics
{hidden}

h4. 基本

{hidden}
@DomainClassUnitTestMixin@ is typically used in combination with testing either a controller, service or tag library where the domain is a mock collaborator defined by the @Mock@ annotation:
{hidden}

@DomainClassUnitTestMixin@は、通常コントローラやサービス、またはタグライブラリといった、@Mock@アノテーションでドメインがモックとして協調動作する必要がある場所で使用されます。

{code:java}
import grails.test.mixin.*

@TestFor(SimpleController)
@Mock(Simple)
class SimpleControllerTests {

}
{code}

{hidden}
The example above tests the @SimpleController@ class and mocks the behavior of the @Simple@ domain class as well. For example consider a typical scaffolded @save@ controller action:
{hidden}

上記の例では@SimpleController@のテストで@Simple@ドメインクラスとして振る舞うモックを宣言しています。例えば典型的なスキャフォルドで生成されたコントローラの@save@アクションについて考えてみます。

{code:java}
class BookController {
    def save() {
        def book = new Book(params)
        if (book.save(flush: true)) {
            flash.message = message(
                    code: 'default.created.message',
                    args: [message(code: 'book.label',
                                   default: 'Book'), book.id])}"
            redirect(action: "show", id: book.id)
        }
        else {
            render(view: "create", model: [bookInstance: book])
        }
    }
}
{code}

{hidden}
Tests for this action can be written as follows:
{hidden}

このアクションに対するテストは次のように書けます。

{code:java}
import grails.test.mixin.*

@TestFor(BookController)
@Mock(Book)
class BookControllerTests {

    void testSaveInvalidBook() {
        controller.save()

        assert model.bookInstance != null
        assert view == '/book/create'
    }

    void testSaveValidBook() {
        params.title = "The Stand"
        params.pages = "500"

        controller.save()

        assert response.redirectedUrl == '/book/show/1'
        assert flash.message != null
        assert Book.count() == 1
    }
}
{code}

{hidden}
@Mock@ annotation also supports a list of mock collaborators if you have more than one domain to mock:
{hidden}

複数のドメインのモックが必要な場合は@Mock@アノテーションにリストで指定することができます。

{code:java}
@TestFor(BookController)
@Mock([Book, Author])
class BookControllerTests {
   ...
}
{code}

{hidden}
Alternatively you can also use the @DomainClassUnitTestMixin@ directly with the @TestMixin@ annotation:
{hidden}

別の方法として@TestMixin@アノテーションに直接@DomainClassUnitTestMixin@を指定する方法もあります。

{code:java}
import grails.test.mixin.domain.DomainClassUnitTestMixin

@TestFor(BookController)
@TestMixin(DomainClassUnitTestMixin)
class BookControllerTests {
   ...
}
{code}

{hidden}
And then call the @mockDomain@ method to mock domains during your test:
{hidden}

そしてテストの中でドメインをモック化する@mockDomain@メソッドを呼び出します。

{code:java}
void testSave() {
    mockDomain(Author)
    mockDomain(Book)
}
{code}

{hidden}
The @mockDomain@ method also includes an additional parameter that lets you pass a Map of Maps to configure a domain, which is useful for fixture-like data:
{hidden}

@mockDomain@メソッドは、ドメインを構築するマップの一覧を与えることで、データのフィクスチャを生成するような使い方もできます。

{code:java}
void testSave() {
    mockDomain(Book, [
            [title: "The Stand", pages: 1000],
            [title: "The Shining", pages: 400],
            [title: "Along Came a Spider", pages: 300] ])
}
{code}

{hidden}
h4. Testing Constraints
{hidden}
h4. 制約のテスト

There are 4 types of validateable classes:

# Domain Classes
# Classes Marked With The \@Validateable Annotation
# Command Objects Which Have Been Made Valdiateable Automatically
# Classes Configured To Be Validateable via The @grails.validateable.classes@ Config.groovy Property

The first 3 are easily testable in a unit test with no special configuration necessary as long as the test method is marked with \@TestFor or explicitly applies the @GrailsUnitTestMixin@ using \@TestMixin.  See the examples below.

{code:java}
// src/groovy/com/demo/MyValidateable.groovy
package com.demo

@grails.validation.Validateable
class MyValidateable {
    String name
    Integer age
    
    static constraints = {
        name matches: /[A-Z].*/
        age range: 1..99
    }
}
{code}

{code:java}
// grails-app/domain/com/demo/Person.groovy
package com.demo

class Person {
    String name

    static constraints = {
        name matches: /[A-Z].*/
    }
}
{code}

{code:java}
// grails-app/controllers/com/demo/DemoController.groovy
package com.demo

class DemoController {

    def addItems(MyCommandObject co) {
        if(co.hasErrors()) {
            render 'something went wrong'
        } else {
            render 'items have been added'
        }
    }
}

class MyCommandObject {
    Integer numberOfItems

    static constraints = {
        numberOfItems range: 1..10
    }
}
{code}

{code:java}
// test/unit/com/demo/PersonSpec.groovy
package com.demo

import grails.test.mixin.TestFor
import spock.lang.Specification

@TestFor(Person)
class PersonSpec extends Specification {

    void "Test that name must begin with an upper case letter"() {
        when: 'the name begins with a lower letter'
        def p = new Person(name: 'jeff')

        then: 'validation should fail'
        !p.validate()

        when: 'the name begins with an upper case letter'
        p = new Person(name: 'Jeff')

        then: 'validation should pass'
        p.validate()
    }
}
{code}

{code:java}
// test/unit/com/demo/DemoControllerSpec.groovy
package com.demo

import grails.test.mixin.TestFor
import spock.lang.Specification

@TestFor(DemoController)
class DemoControllerSpec extends Specification {

    void 'Test an invalid number of items'() {
        when:
        params.numberOfItems = 42
        controller.addItems()

        then:
        response.text == 'something went wrong'
    }

    void 'Test a valid number of items'() {
        when:
        params.numberOfItems = 8
        controller.addItems()

        then:
        response.text == 'items have been added'
    }
}
{code}

{code:java}
// test/unit/com/demo/MyValidateableSpec.groovy
package com.demo

import grails.test.mixin.TestMixin
import grails.test.mixin.support.GrailsUnitTestMixin
import spock.lang.Specification


@TestMixin(GrailsUnitTestMixin)
class MyValidateableSpec extends Specification {

    void 'Test validate can be invoked in a unit test with no special configuration'() {
        when: 'an object is valid'
        def validateable = new MyValidateable(name: 'Kirk', age: 47)
        
        then: 'validate() returns true and there are no errors'
        validateable.validate()
        !validateable.hasErrors()
        validateable.errors.errorCount == 0

        when: 'an object is invalid'
        validateable.name = 'kirk'
        
        then: 'validate() returns false and the appropriate error is created'
        !validateable.validate()
        validateable.hasErrors()
        validateable.errors.errorCount == 1
        validateable.errors['name'].code == 'matches.invalid'
        
        when: 'the clearErrors() is called'
        validateable.clearErrors()
        
        then: 'the errors are gone'
        !validateable.hasErrors()
        validateable.errors.errorCount == 0
        
        when: 'the object is put back in a valid state'
        validateable.name = 'Kirk'
        
        then: 'validate() returns true and there are no errors'
        validateable.validate()
        !validateable.hasErrors()
        validateable.errors.errorCount == 0
    }
}
{code}

{code:java}
// test/unit/com/demo/MyCommandObjectSpec.groovy
package com.demo

import grails.test.mixin.TestMixin
import grails.test.mixin.support.GrailsUnitTestMixin
import spock.lang.Specification

@TestMixin(GrailsUnitTestMixin)
class MyCommandObjectSpec extends Specification {

    void 'Test that numberOfItems must be between 1 and 10'() {
        when: 'numberOfItems is less than 1'
        def co = new MyCommandObject()
        co.numberOfItems = 0

        then: 'validation fails'
        !co.validate()
        co.hasErrors()
        co.errors['numberOfItems'].code == 'range.toosmall'
        
        when: 'numberOfItems is greater than 10'
        co.numberOfItems = 11

        then: 'validation fails'
        !co.validate()
        co.hasErrors()
        co.errors['numberOfItems'].code == 'range.toobig'
        
        when: 'numberOfItems is greater than 1'
        co.numberOfItems = 1

        then: 'validation succeeds'
        co.validate()
        !co.hasErrors()
        
        when: 'numberOfItems is greater than 10'
        co.numberOfItems = 10

        then: 'validation succeeds'
        co.validate()
        !co.hasErrors()
    }
}
{code}

For validateable classes which are not one of the first 3 types listed above but are configured with the @grails.validateable.classes@ property in @Config.groovy@, one additional step is required to test validation.  @GrailsUnitTestMixin@ provides a method named @mockForConstraintsTests@ that will mock validation support for these classes.  See the example below.

{code:java}
// src/groovy/com/demo/Book.groovy
package com.demo

class Book {
    String title
    String author

    static constraints = {
        author minSize: 5
    }
}
{code}

{code:java}
// grails-app/conf/Config.groovy
grails.validateable.classes = [com.demo.Book]

// ...
{code}

{code:java}
// test/unit/com/demo/BookSpec.groovy
package com.demo

import grails.test.mixin.TestMixin
import grails.test.mixin.support.GrailsUnitTestMixin
import spock.lang.Specification

@TestMixin(GrailsUnitTestMixin)
class BookSpec extends Specification {

    void 'Test validation'() {
        given:
        mockForConstraintsTests Book

        when: 'the author name has only 4 characters'
        def book = new Book()
        book.author = 'Jeff'

        then: 'validation should fail'
        !book.validate()
        book.hasErrors()
        book.errors['author'] == 'minSize'

        when: 'the author name has 5 characters'
        book.author = 'Jacob'

        then: 'validation should pass'
        book.validate()
        !book.hasErrors()
    }
}
{code}

Note that the @mockForConstraintsTests@ method changes the behavior of the errors object such that something like @book.errors['author']@ will evaluate to the name of the failed constraint, not a @org.springframework.validation.FieldError@ object.  This is convenient for unit tests.  If your unit test really does want a reference to the @org.springframework.validation.FieldError@ object use something like @book.errors.getFieldError('author')@.


That's it for testing constraints. One final thing we would like to say is that testing the constraints in this way catches a common error: typos in the "constraints" property name which is a mistake that is easy to make and equally easy to overlook. A unit test for your constraints will highlight the problem straight away.

