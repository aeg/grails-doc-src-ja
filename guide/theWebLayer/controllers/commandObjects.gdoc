{hidden}Grails controllers support the concept of command objects. A command object is similar to a form bean in a framework like Struts.  They are useful for grouping a subset of request parameters into a single object using [data binding|guide:dataBinding].{hidden}
Grailsのコマンドオブジェクトの設計概念をサポートしています。コマンドオブジェクトはStrutsでのフォームビーンと同じような物です。リクエストパラメータのサブセットをグルーピングして、[データバインディング|guide:dataBinding]を使用する１つのオブジェクトを作成する際に便利です。

h4. コマンドオブジェクトの宣言 {hidden}Declaring Command Objects {hidden}

{hidden}Command objects are typically declared in the same source file as a controller, directly below the controller class definition. For example:{hidden}
{hidden}Command object classes are defined just like any other class.{hidden}
コマンドオブジェクトクラスは他の通常クラスと同じように設定します:

{code:java}
@grails.validation.Validateable
class LoginCommand {
    String username
    String password

    static constraints = {
        username(blank: false, minSize: 6)
        password(blank: false, minSize: 6)
    }
}
{code}

As this example shows, since the command object class is marked with @Validateable you can define [constraints|guide:constraints] in command objects just like in [domain classes|guide:GORM].  Another way to make a command object class validateable is to define it in the same source file as the controller which is using the class as a command object.  If a command object class is not defined in the same source file as a controller which uses the class as a command object and the class is not marked with @Validateable, the class will not be made validateable.  It is not required that command object classes be validateable.


h4. コマンドオブジェクトを使用する {hidden}Using Command Objects {hidden}

To use command objects, controller actions may optionally specify any number of command object parameters. The parameter types must be supplied so that Grails knows what objects to create and initialize.

Before the controller action is executed Grails will automatically create an instance of the command object class and populate its properties by binding the request parameters.  If the command object class is marked with @Validateable then the command object will be validated. For example:

{code:java}
class LoginController {

    def login(LoginCommand cmd) {
        if (cmd.hasErrors()) {
            redirect(action: 'loginForm')
            return
        }

        // work with the command object data
    }
}
{code}

h4. コマンドオブジェクトと依存注入 {hidden}Command Objects and Dependency Injection {hidden}

{hidden}Command objects can participate in dependency injection. This is useful if your command object has some custom validation logic which uses a Grails [service|guide:services]:{hidden}
コマンドオブジェクトに依存注入をすることが可能です。Grailsの[サービス|guide:services]を使用したカスタムバリデーションなどを使用する際に便利です:


{code}
@grails.validation.Validateable
class LoginCommand {

    def loginService

    String username
    String password

    static constraints = {
        username validator: { val, obj ->
            obj.loginService.canLogin(obj.username, obj.password)
        }
    }
}
{code}

{hidden}In this example the command object interacts with the @loginService@ bean which is injected by name from the Spring @ApplicationContext@.{hidden}
この例では、@loginService@をSpringの@ApplicatinContext@から名前解決でコマンドオブジェクトに注入しています。
