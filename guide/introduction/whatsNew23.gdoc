h4. 依存管理の向上

{hidden}The default dependency resolution engine used by Grails has been changed to [Aether|http://eclipse.org/aether], the dependency resolution engine used by Maven. Which engine you use can be configured in @BuildConfig@:{hidden}
Grailsでデフォルトで使用されている依存管理エンジンが、Mavenで使用されているエンジンの [Aether|http://eclipse.org/aether] に変更されました。 @BuildConfig@ で設定をすることでどちらのエンジンを使用するか変更可能です。

{code}
grails.project.dependency.resolver = "maven" // or ivy
{code}

{hidden}Using Aether dependency resolution in Grails results in the same behavior as when using the Maven build tool, meaning improved snapshot handling, understanding of custom packaging types and so on.{hidden}
Aether依存管理を使用するとGrailsではMavenビルドツールと同じ振る舞いをします。これは、前と比べてスナップショットハンドリングの向上やカスタムパッケージング等の機能向上を意味します。

{hidden}In addition, the [dependency-report|commandLine] command has been updated to print the dependency graph of the console, which helps in diagnosing dependency resolution failures. See the chapter on [Dependency Resolution|guide:dependencyResolution] for more information.{hidden}
そしてさらに、 [dependency-report|commandLine] コマンドも改良され、依存問題の解決を手助けするために、依存関係のグラフがコンソールに表示されるようになりました。 詳しくは [依存性解決|guide:dependencyResolution] のドキュメントを参照してください。

h4. コマンドライン

{hidden}The @create-app@ command will now by default generate the command line grailsw wrapper for newly created applications.  The @\-\-skip-wrapper@ switch may be used to prevent the wrapper from being generated.{hidden}
@create\-app@ コマンドがデフォルトでgrailswラッパーを生成するようになりました。ラッパーを生成しない場合は @\-\-skip\-wrapper@ オプションを指定してください。

{code}
grails create-app appname --skip-wrapper
{code}

h4. データバインダー

{hidden}Grails 2.3 includes a new data binding mechanism which is more flexible and easier to maintain than the data binder used in previous versions.  The new data binder includes numerous enhancements including:{hidden}
Grails 2.3では、依存のバージョンよりもフレキシブルで保守性の高く簡単な新データバインダーを実装しています。

{hidden}
* Custom date formats on a per field basis using [BindingFormat|api:org.grails.databinding.BindingFormat]
* User defined data converters using [ValueConverter|api:org.grails.databinding.converters.ValueConverter]
* User defined formatted data converters using [BindingFormat|api:org.grails.databinding.BindingFormat] and [FormattedValueConverter|api:org.grails.databinding.converters.FormattedValueConverter]
* Custom binding on a per class basis using [BindUsing|api:org.grails.databinding.BindUsing]
* Custom binding on a per field basis using [BindUsing|api:org.grails.databinding.BindUsing]
{hidden}

* フィールドごとのカスタム日付フォーマット - [BindingFormat|api:org.grails.databinding.BindingFormat]
* ユーザ定義可能なデータコンバーター - [ValueConverter|api:org.grails.databinding.converters.ValueConverter]
* ユーザ定義フォーマットデータコンバーター - [BindingFormat|api:org.grails.databinding.BindingFormat]  [FormattedValueConverter|api:org.grails.databinding.converters.FormattedValueConverter]
* クラスごとのカスタムバインディング - [BindUsing|api:org.grails.databinding.BindUsing]
* フィールドごとのカスタムバインディング - [BindUsing|api:org.grails.databinding.BindUsing]

{hidden}See the [Data Binding|guide:dataBinding] section for details.{hidden}
詳細は [データバインディング|guide:dataBinding] のセクションを参照してください。


{hidden}The legacy data binder may be used by assinging @true@ to the @grails.databinding.useLegacyBinder@ property in @grails-app/conf/Config.groovy@.  Note that the legacy binder does not support any of the new features provided by the new data binder.{hidden}
@grails-app/conf/Config.groovy@ の @grails.databinding.useLegacyBinder@ プロパティを @true@ にすることで以前のデータバインダーに変更することができます。 以前のバインダーは今回実装された新機能には対応していません。

