{hidden}h4. Improved Dependency Management{hidden}
h4. 依存管理の向上

{hidden}The default dependency resolution engine used by Grails has been changed to [Aether|http://eclipse.org/aether], the dependency resolution engine used by Maven. Which engine you use can be configured in @BuildConfig@:{hidden}
Grailsでデフォルトで使用されている依存管理エンジンが、Mavenで使用されているエンジンの [Aether|http://eclipse.org/aether] に変更されました。 @BuildConfig@ で設定をすることでどちらのエンジンを使用するか変更可能です。

{code}
grails.project.dependency.resolver = "maven" // or ivy
{code}

{hidden}Using Aether dependency resolution in Grails results in the same behavior as when using the Maven build tool, meaning improved snapshot handling, understanding of custom packaging types and so on.{hidden}
Aether依存管理を使用するとGrailsではMavenビルドツールと同じ振る舞いをします。これは、前と比べてスナップショットハンドリングの向上やカスタムパッケージング等の機能向上を意味します。

{hidden}In addition, the [dependency-report|commandLine] command has been updated to print the dependency graph of the console, which helps in diagnosing dependency resolution failures. See the chapter on [Dependency Resolution|guide:dependencyResolution] for more information.{hidden}
そしてさらに、 [dependency-report|commandLine] コマンドも改良され、依存問題の解決を手助けするために、依存関係のグラフがコンソールに表示されるようになりました。 詳しくは [依存性解決|guide:dependencyResolution] のドキュメントを参照してください。

{hidden}h4. Data Binder{hidden}
h4. データバインダー

{hidden}Grails 2.3 includes a new data binding mechanism which is more flexible and easier to maintain than the data binder used in previous versions.  The new data binder includes numerous enhancements including:{hidden}
Grails 2.3では、依存のバージョンよりもフレキシブルで保守性の高く簡単な新データバインダーを実装しています。

{hidden}
* Custom date formats on a per field basis using [BindingFormat|api:org.grails.databinding.BindingFormat]
* User defined data converters using [ValueConverter|api:org.grails.databinding.converters.ValueConverter]
* User defined formatted data converters using [BindingFormat|api:org.grails.databinding.BindingFormat] and [FormattedValueConverter|api:org.grails.databinding.converters.FormattedValueConverter]
* Custom binding on a per class basis using [BindUsing|api:org.grails.databinding.BindUsing]
* Custom binding on a per field basis using [BindUsing|api:org.grails.databinding.BindUsing]
* By default all blank and empty Strings will be converted to null during data binding (configurable)
{hidden}

* フィールドごとのカスタムデータフォーマット - [BindingFormat|api:org.grails.databinding.BindingFormat]
* ユーザ定義可能なデータコンバーター - [ValueConverter|api:org.grails.databinding.converters.ValueConverter]
* ユーザ定義フォーマットデータコンバーター - [BindingFormat|api:org.grails.databinding.BindingFormat]  [FormattedValueConverter|api:org.grails.databinding.converters.FormattedValueConverter]
* クラスごとのカスタムバインディング - [BindUsing|api:org.grails.databinding.BindUsing]
* フィールドごとのカスタムバインディング - [BindUsing|api:org.grails.databinding.BindUsing]
* デフォルトで全ての空文字列とブランクはデータバインディングでnullに変換されます。(設定可能)

{hidden}See the [Data Binding|guide:dataBinding] section for details.{hidden}
詳細は [データバインディング|guide:dataBinding] のセクションを参照してください。

{hidden}The legacy data binder may be used by assigning @true@ to the @grails.databinding.useSpringBinder@ property in @grails-app/conf/Config.groovy@.  Note that the legacy binder does not support any of the new features provided by the new data binder.{hidden}
@grails-app/conf/Config.groovy@ の @grails.databinding.useSpringBinder@ プロパティを @true@ にすることで以前のデータバインダーに変更することができます。 以前のバインダーは今回実装された新機能には対応していません。

{hidden}h4. Forked Execution{hidden}
h4. フォーク実行 

{hidden}All major commands can now be forked into a separate JVM, thus isolating the build path from the runtime / test paths. Forked execution can be controlled via the @BuildConfig@:{hidden}
全てのメジャーなコマンドが別々のJVMへフォークされるようになり、ビルドパスをランタイム/テストから分離します。 フォーク実行のパラメータは @BuildConfig@ に定義できます:

{hidden}
{code}
forkConfig = [maxMemory: 1024, minMemory: 64, debug: false, maxPerm: 256]
grails.project.fork = [
   test: forkConfig, // configure settings for the test-app JVM
   run: forkConfig, // configure settings for the run-app JVM
   war: forkConfig, // configure settings for the run-war JVM
   console: forkConfig // configure settings for the Swing console JVM
]
{code}
{hidden}
{code}
forkConfig = [maxMemory: 1024, minMemory: 64, debug: false, maxPerm: 256]
grails.project.fork = [
   test: forkConfig, // test-app用JVMへの設定
   run: forkConfig, // run-app用JVMへの設定
   war: forkConfig, // run-war用JVMへの設定
   console: forkConfig // console用JVMへの設定
]
{code}

{hidden}See the documentation on [Forked Mode|guide:forkedMode] for more information.{hidden}
詳しくは [フォームモード|guide:forkedMode] のドキュメントを参照してください。

{hidden}h4. Async support {hidden}
h4. 非同期サポート

{hidden}Grails 2.3 features new [Asynchronous Programming APIs|guide:async] that allow for asynchronous processing of requests and integrate seamlessly with GORM. Example:{hidden}
Grails 2.3では、リクエストの非同期処理と、GORMとシームレスに統合した新たな[非同期プログラミングAPI|guide:async]を提供しています。 例:

{code}
import static grails.async.Promises.*
...
def index() {
   tasks books: Book.async.list(),
         totalBooks: Book.async.count(),
         otherValue: {
           // do hard work
         }
}
{code}

{hidden}See [the documentation|guide:async] for further information.{hidden}
詳しくは、 [ドキュメント|guide:async] を参照してください。

{hidden}h4. Encoding / Escaping Improvements {hidden}
h4. エンコーディング / エスケーピングの向上

{hidden}Grails 2.3 features dedicated support for [Cross Site Scripting (XSS) prevention|guide:xssPrevention], including :{hidden}
Grails 2.3では専用の [クロスサイトスクリプティング(XSS)防御|guide:xssPrevention]を実装しています。

{hidden}
* Defaulting to HTML escaping all GSP expressions and scriptlets
* Context sensitive encoding switching for tags
* Double encoding prevention
* Optional automatic encoding of all data in a GSP page not considered safe
{hidden}
* デフォルトでGSPエクスプレッションとスクリプトレットをHTMLエスケーピング
* タグでの状況依存エンコーディング切替
* 多重エンコーディング防止
* GSPページ内の全てのデータに対して安全と判断しない場合の自動エンコーディング

{hidden}See the documentation on [Cross Site Scripting (XSS) prevention|guide:xssPrevention] for more information.{hidden}
詳しくは、 [クロスサイトスクリプティング(XSS)防御|guide:xssPrevention] のドキュメントを参照してください。

{hidden}h4. Hibernate 3 and 4 support {hidden}
h4. Hibernate 3と4をサポート

{hidden}The GORM for Hibernate 3 support for Grails has been extracted into a separate project, allowing new support for Hibernate 4 as a separate plugin.{hidden}
新たにHibernate 4をプラグインでサポートするために、Hibernate 3用のGORMは、本体から別のプラグインプロジェクトとなりました。

{hidden}h4. Command Line {hidden}
h4. コマンドライン

{hidden}The @create-app@ command will now by default generate the command line grailsw wrapper for newly created applications.  The @\-\-skip-wrapper@ switch may be used to prevent the wrapper from being generated.{hidden}
@create\-app@ コマンドがデフォルトでgrailswラッパーを生成するようになりました。ラッパーを生成しない場合は @\-\-skip\-wrapper@ オプションを指定してください。

{code}
grails create-app appname --skip-wrapper
{code}
