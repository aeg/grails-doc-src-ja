h4. Groovy 2.3

{hidden}Grails 2.4 comes with Groovy 2.2.2 which includes many new features and enhancements.  See the [2.2.0 release notes|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19073], [2.2.1 release notes|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19572], [2.2.2 release notes|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19832]{hidden}
Grails 2.4では、新機能や改良点を多く含んだGroovy 2.2.2がバンドルされています。 詳しくは[2.2.0リリースノート|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19073], [2.2.1リリースノート|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19572], [2.2.2リリースノート|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19832]を参照してください。


h4. Spring 4.0

{hidden}Grails 2.4 comes with Spring 4.0.3 which includes many new features and enhancements.  See the [Spring documentation|http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/new-in-4.0.html].{hidden}
Grails 2.4では、新機能や改良点を多く含んだSpring 4.0.3がバンドルされています。詳しくは[Springドキュメント|http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/new-in-4.0.html]を参照してください。

h4. Hibernate 4.3

{hidden}Grails 2.4 now uses Hibernate 4.3.5 by default (Hibernate 3 is still available as an optional install).{hidden}
Grails 2.4はデフォルトでHibernate 4.3.5を使用します(Hibernate 3はインストールすればまだ利用可能です)

{hidden}h4. Standalone GORM and GSP{hidden}
h4. スタンドアローン版GORMとGSP

{hidden}GORM and GSP can now be used outside of Grails. See the following guides for more information:{hidden}
GORMとGSPはGrailsの外でも利用可能となりました。追加情報はこれらのガイドを参照してください:

{hidden}
* [Accessing Data with GORM|https://spring.io/guides/gs/accessing-data-gorm/]
* [Accessing MongoDB Data with GORM|https://spring.io/guides/gs/accessing-data-gorm-mongodb/]
* TODO: Link to standalone GSP article
{hidden}
* [GORMによるデータアクセス|https://spring.io/guides/gs/accessing-data-gorm/]
* [GORMによるMongoDBアクセス|https://spring.io/guides/gs/accessing-data-gorm-mongodb/]
* TODO: スタンドアローンGSPの記事へのリンク

{hidden}
h4.  The Asset-Pipeline replaces Resources to serve static assets.
{hidden}
h4. 静的アセット管理はリソースプラグインからアセットパイプラインに変更されました

{hidden}The asset-pipeline provides a new, easier to manage, faster means of managing your javascript, css, and images, while also bringing compiled client languages in to the fray as first class citizens (i.e. Coffeescript, LESS, SASS).{hidden}
アセットパイプラインは、javascript,cssや画像を簡単に素速く管理できる機能を提供しています。さらに、Coffeescript, LESS, SASS等の言語コンパイルにも対応しています。


{hidden}All your assets should now live in the @grails-app/assets@ subflolders. Three folders are made for you by default:{hidden}
全てのアセットは@grails-app/assets@階層に配置します。以下の３つのフォルダがデフォルトで作成されています:
* javascripts
* stylesheets
* images

{hidden}Now, defining manifests are done directly in your javascript files, or css by using require directives!{hidden}
マニフェストの定義は使用するcssまたはjavascriptファイルに直接記述します。
{code}
//= require jquery
//= require_self
//= require file_a
//= require_tree .

console.log('some javascript');
{code}

{hidden}Easily add your assets to your GSP files:{hidden}
GSPファイルには以下のタグでアセットを追加します。
{code}
<asset:javascript src="application.js"/>
<asset:stylesheet href="application.css"/>
<asset:image src="grails_logo.png" height="60" />
{code}

{hidden}Enjoy developing with on the fly asset processing, asset compiling on WAR, and much more.  See the [docs](http://bertramdev.github.com/asset-pipeline) for more info.{hidden}
開発時は快適にアセット変換され、WAR生成時はコンパイルされたアセットが生成されます。詳しくは[ドキュメント](http://bertramdev.github.com/asset-pipeline)を参照してください。

{hidden}h4. Static Compilation{hidden}
h4. スタティックコンパイル

{hidden}Groovy is a dynamically dispatched, dynamically typed language by default but also has great support for static type checking and static compilation.  See [these notes on Groovy static compilation|http://docs.codehaus.org/display/GroovyJSR/GEP+10+-+Static+compilation].  In general Grails supports Groovy's static compilation but there are a lot of special situations which are common in a Grails app which cannot be statically compiled.  For example, if a method marked with @\@CompileStatic@ contains code which invokes a GORM dynamic finder the code will not compile because the Groovy compiler cannot verify that the dynamic finder is valid.  Grails 2.4 improves on this by allowing code to be staticaly compiled and still do things like invoke GORM dynamic finders.{hidden}

Groovyは、デフォルトでで動的ディスパッチ・動的型付け言語ですが、同時に静的型付けスタティックコンパイルもサポートしています。
この、[スタティックコンパイルに関してはGroovyのドキュメントを|http://docs.codehaus.org/display/GroovyJSR/GEP+10+-+Static+compilation]確認してください。
今までのGrails(2.x以降)でも、Groovyのスタティックコンパイルに対応している部分もありましたが、Grailsアプリで共通な、いくつかの特別な条件において使用できない場合がありました。例えば、@\@CompileStatic@とマークされているメソッドの中でGORMにダイナミックファインダが実行されている場合などは、Groovyコンパイラがダイナミックファインダが有効と判断できないためスタティックコンパイルされません。Grails 2.4では、その部分にも対応して、GORMのダイナミックファインダが使用されていてもスタティックコンパイル可能にしました。


{hidden}The [grails.compiler.GrailsCompileStatic|api:grails.compiler.GrailsCompileStatic] annotation behaves much like the [groovy.transform.CompileStatic|api:groovy.transform.CompileStatic] annotation and provides special handling to recognize Grails specific constructs.{hidden}

[grails.compiler.GrailsCompileStatic|api:grails.compiler.GrailsCompileStatic]アノテーションは、ほぼ[groovy.transform.CompileStatic|api:groovy.transform.CompileStatic]アノテーションと同等で、Grailsの特殊な仕組みをハンドルできるように提供されています。

{hidden}The following controller is marked with @\@GrailsCompileStatic@.  All of the code that can be statically compiled will be statically compiled.  When the compiler encounters code which can not be statically validated, normally that would result in a compile error.  The Grails compiler will allow certain things to be considered valid and dynamically dispatch those instructions.{hidden}

次のコントローラの例は @\@GrailsCompileStatic@を使用しています。スタティックコンパイル可能な物は全てスタティックコンパイルします。コンパイラがスタティックコンパイルが不可能と判断した場合はコンパイルエラーを出します。Grailsのコンパイラは内容を特定して判断します。


{code:java}
// grails-app/controllers/com/demo/PersonController.groovy
package com.demo

import grails.compiler.GrailsCompileStatic

@GrailsCompileStatic
class PersonController {

    def showKids() {
        def kids = Person.findAllByAgeLessThan(16)

        // ...
    }
}
{code}

{hidden}There may be situations where most of the code in a class should be statically compiled but a specific method should be left to dynamic compilation.  See the following example.{hidden}
状況によっては、クラスのほぼ全てがスタティックコンパイルされ、一部のメソッドのみ動的コンパイルする場合も有ると思います。次の例を参照:

{hidden}
{code:java}
import grails.compiler.GrailsCompileStatic
import groovy.transform.TypeCheckingMode

@GrailsCompileStatic
class SomeClass {

    def update() {
        // this method will be statically compiled
    }

    @GrailsCompileStatic(TypeCheckingMode.SKIP)
    def save() {
        // this method will not be statically compiled
    }

    def delete() {
        // this method will be statically compiled
    }
}
{code}
{hidden}

{code:java}
import grails.compiler.GrailsCompileStatic
import groovy.transform.TypeCheckingMode

@GrailsCompileStatic
class SomeClass {

    def update() {
        // このメソッドはスタティックコンパイルされます
    }

    @GrailsCompileStatic(TypeCheckingMode.SKIP)
    def save() {
        // このメソッドはスタティックコンパイルされません！
    }

    def delete() {
        // このメソッドはスタティックコンパイルされます
    }
}
{code}

{hidden}Care must be taken when deciding to statically compile code.  There are benefits associated with static compilation but in order to take advantage of those benefits you are giving up the power and flexibility of dynamic dispatch.  For example if code is statically compiled it cannot take advantage of runtime metaprogramming enhancements which may be provided by plugins.{hidden}
スタティックコンパイルをするかどうかを決めるには注意が必要です。スタティックコンパイルする場合その利点も有りますが、それは柔軟なダイナミックディスパッチを諦める事にもなります。例えば、コードがスタティックコンパイルされている場合は、プラグイン等から提供されているランタイムメタプログラミングを使用した便利な機能の利点を受けられなくなります。


{hidden}
{note}
More notes on static compilation to be provided before the release of 2.4.0 final.
{note}

{hidden}
{note}
2.4.0の最終リリースまでに、さらなるスタティックコンパイル情報を提供する予定です
{note}

{hidden}h4. Ajax Tags Have Been Deprecated{hidden}
h4. Ajax Tagsは廃止されました

{hidden}The [formRemote|tags], [remoteField|tags], [remoteFunction|tags] and [remoteLink|tags] Ajax tags have been deprecated and will be removed from a future version of Grails.  Applications may provide their own Ajax tags and/or Javascript plugins may provide Ajax tags of their own.{hidden}
[formRemote|tags], [remoteField|tags], [remoteFunction|tags]と[remoteLink|tags]これらAjaxタグは deprecated の取り扱いとなり、Grails将来のバージョンでは削除たぶん削除されます。アプリケーションは独自のAjaxタグもしくはJavascriptプラグイン、もしくはその両方を提供することになるだろう。

{hidden}h4. Nullable Command Object Properties{hidden}
h4. Nullableコマンドオブジェクトプロパティ

{hidden}The behavior in Grails 2.3.x is such that constrained properties in command objects and other classes marked with \@Validateable are all configured with @nullable: false@ by default.  Unconstrained properties were not configured with @nullable: false@.  In Grails 2.4 all non-static unconstrained properties in command object classes and other classes marked with \@Validateable are all configured with @nullable: false@.{hidden}
Grails 2.3.x においては、コマンドオブジェクトにおけるプロパティ制約と \@Validateable とマークされた他のクラスが全てデフォルトで @nullable: false@ と設定されていると振る舞う。制約が設定されていないプロパティは @nullable: false@ と設定されていなかった。Grails 2.4ではコマンドオブジェクトクラスや \@Validateable によりマークされた他のクラス全てのスタティックでない制約が設定されていないクラスは全て @nullable: false@ として設定される。

{hidden}h4. New Command Object Data Binding Behavior{hidden}
h4. 新しいコマンドオブジェクトデータバインダーの振る舞い

{hidden}The data binding behavior for command objects have changed in Grails 2.4.  Request parameter names may now be prefixed with the name of the controller action argument name that the request parameter should be bound to.  For example, if a request is made to the @buy@ action in the controller below a request parameter named @buyer.name@ will be bound to the @name@ property of the @buyer@ argument and a request parameter named @seller.name@ will be bound to the @name@ property of the @seller@ argument.{hidden}
コマンドオブジェクトへのデータバインダーの振る舞いがGrails 2.4 では変わった。リクエストパラメータの名前がリクエストパラメータに結び付けられるコントローラアクション引数の名前によりプレフィックスが付与されるかもしれない。
例えば、もしリクエストがコントローラの @buy@　アクションで作られるならば、リクエストパラメータの @buyer.name@ は @buyer@ 引数の @name@ プロパティに結び付けられるだろう。そして リクエストパラメータ @seller.name@ は @seller@ 引数の @name@ プロパティに結び付けられるだろう。

{code:java}
class StoreController {
    def buy(Person buyer, Person seller) {
        // ...
    }
}

class Person {
    String name
}
{code}

{hidden}See the [Command Objects documentation|guide:commandObjects] for more details.{hidden}
詳細は[コマンドオブジェクト|guide:commandObjects]を参照してください。

{hidden}h4. grails-debug Script Has Been Removed{hidden}
h4. grails-debugスクリプトは削除されました。

{hidden}The @grails-debug@ and @grails-debug.bat@ scripts have been removed.  To debug the build system JVM run @grails -debug <command>@ and to debug the forked JVM run @grails --debug-fork <command>@.{hidden}
The @grails-debug@ and @grails-debug.bat@ scripts have been removed.  To debug the build system JVM run @grails -debug <command>@ and to debug the forked JVM run @grails --debug-fork <command>@.


