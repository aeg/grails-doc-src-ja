h4. Groovy 2.2

{hidden}Grails 2.4 comes with Groovy 2.2.2 which includes many new features and enhancements.  See the [2.2.0 release notes|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19073], [2.2.1 release notes|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19572], [2.2.2 release notes|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19832]{hidden}
Grails 2.4では、新機能や改良点を多く含んだGroovy 2.2.2がバンドルされています。 詳しくは[2.2.0リリースノート|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19073], [2.2.1リリースノート|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19572], [2.2.2リリースノート|http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&version=19832]を参照してください。


h4. Spring 4.0

{hidden}Grails 2.4 comes with Spring 4.0.2 which includes many new features and enhancements.  See the [Spring documentation|http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/new-in-4.0.html].{hidden}
Grails 2.4では、新機能や改良点を多く含んだSpring 4.0.2がバンドルされています。詳しくは[Springドキュメント|http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/new-in-4.0.html]を参照してください。

{hidden}
h4.  The Asset-Pipeline replaces Resources to serve static assets.
{hidden}
h4. 静的アセット管理はリソースプラグインからアセットパイプラインに変更されました

{hidden}The asset-pipeline provides a new, easier to manage, faster means of managing your javascript, css, and images, while also bringing compiled client languages in to the fray as first class citizens (i.e. Coffeescript, LESS, SASS).{hidden}
アセットパイプラインは、javascript,cssや画像を簡単に素速く管理できる機能を提供しています。さらに、Coffeescript, LESS, SASS等の言語コンパイルにも対応しています。


{hidden}All your assets should now live in the @grails-app/assets@ subflolders. Three folders are made for you by default:{hidden}
全てのアセットは@grails-app/assets@階層に配置します。以下の３つのフォルダがデフォルトで作成されています:
* javascripts
*  stylesheets
* images

{hidden}Now, defining manifests are done directly in your javascript files, or css by using require directives!{hidden}
マニフェストの定義は使用するcssまたはjavascriptファイルに直接記述します。
{code}
//= require jquery
//= require_self
//= require file_a
//= require_tree .

console.log('some javascript');
{code}

{hidden}Easily add your assets to your GSP files:{hidden}
GSPファイルには以下のタグでアセットを追加します。
{code}
<asset:javascript src="application.js"/>
<asset:stylesheet href="application.css"/>
<asset:image src="grails_logo.png" height="60" />
{code}

{hidden}Enjoy developing with on the fly asset processing, asset compiling on WAR, and much more.  See the [docs](http://bertramdev.github.com/asset-pipeline) for more info.{hidden}
開発時は快適にアセット変換され、WAR生成時はコンパイルされたアセットが生成されます。詳しくは[ドキュメント](http://bertramdev.github.com/asset-pipeline)を参照してください。

{hidden}h4. Static Compilation{hidden}
h4. スタティックコンパイル

{hidden}Groovy is a dynamically dispatched, dynamically typed language by default but also has great support for static type checking and static compilation.  See [these notes on Groovy static compilation|http://docs.codehaus.org/display/GroovyJSR/GEP+10+-+Static+compilation].  In general Grails supports Groovy's static compilation but there are a lot of special situations which are common in a Grails app which cannot be statically compiled.  For example, if a method marked with @\@CompileStatic@ contains code which invokes a GORM dynamic finder the code will not compile because the Groovy compiler cannot verify that the dynamic finder is valid.  Grails 2.4 improves on this by allowing code to be staticaly compiled and still do things like invoke GORM dynamic finders.{hidden}

Groovyは、デフォルトでで動的ディスパッチ・動的型付け言語ですが、同時に静的型付けスタティックコンパイルもサポートしています。
この、[スタティックコンパイルに関してはGroovyのドキュメントを|http://docs.codehaus.org/display/GroovyJSR/GEP+10+-+Static+compilation]確認してください。
今までのGrails(2.x以降)でも、Groovyのスタティックコンパイルに対応している部分もありましたが、Grailsアプリで共通な、いくつかの特別な条件において使用できない場合がありました。例えば、@\@CompileStatic@とマークされているメソッドの中でGORMにダイナミックファインダが実行されている場合などは、Groovyコンパイラがダイナミックファインダが有効と判断できないためスタティックコンパイルされません。Grails 2.4では、その部分にも対応して、GORMのダイナミックファインダが使用されていてもスタティックコンパイル可能にしました。


{hidden}The [grails.compiler.GrailsCompileStatic|api:grails.compiler.GrailsCompileStatic] annotation behaves much like the [groovy.transform.CompileStatic|api:groovy.transform.CompileStatic] annotation and provides special handling to recognize Grails specific constructs.{hidden}

[grails.compiler.GrailsCompileStatic|api:grails.compiler.GrailsCompileStatic]アノテーションは、ほぼ[groovy.transform.CompileStatic|api:groovy.transform.CompileStatic]アノテーションと同等で、Grailsの特殊な仕組みをハンドルできるように提供されています。

{hidden}The following controller is marked with @\@GrailsCompileStatic@.  All of the code that can be statically compiled will be statically compiled.  When the compiler encounters code which can not be statically validated, normally that would result in a compile error.  The Grails compiler will allow certain things to be considered valid and dynamically dispatch those instructions.{hidden}

次のコントローラの例は @\@GrailsCompileStatic@を使用しています。スタティックコンパイル可能な物は全てスタティックコンパイルします。コンパイラがスタティックコンパイルが不可能と判断した場合はコンパイルエラーを出します。Grailsのコンパイラは内容を特定して判断します。


{code:java}
// grails-app/controllers/com/demo/PersonController.groovy
package com.demo

import grails.compiler.GrailsCompileStatic

@GrailsCompileStatic
class PersonController {

    def showKids() {
        def kids = Person.findAllByAgeLessThan(16)

        // ...
    }
}
{code}

{hidden}There may be situations where most of the code in a class should be statically compiled but a specific method should be left to dynamic compilation.  See the following example.{hidden}
状況によっては、クラスのほぼ全てがスタティックコンパイルされ、一部のメソッドのみ動的コンパイルする場合も有ると思います。次の例を参照:

{hidden}
{code:java}
import grails.compiler.GrailsCompileStatic
import groovy.transform.TypeCheckingMode

@GrailsCompileStatic
class SomeClass {

    def update() {
        // this method will be statically compiled
    }

    @GrailsCompileStatic(TypeCheckingMode.SKIP)
    def save() {
        // this method will not be statically compiled
    }

    def delete() {
        // this method will be statically compiled
    }
}
{code}
{hidden}

{code:java}
import grails.compiler.GrailsCompileStatic
import groovy.transform.TypeCheckingMode

@GrailsCompileStatic
class SomeClass {

    def update() {
        // このメソッドはスタティックコンパイルされます
    }

    @GrailsCompileStatic(TypeCheckingMode.SKIP)
    def save() {
        // このメソッドはスタティックコンパイルされません！
    }

    def delete() {
        // このメソッドはスタティックコンパイルされます
    }
}
{code}

{hidden}Care must be taken when deciding to statically compile code.  There are benefits associated with static compilation but in order to take advantage of those benefits you are giving up the power and flexibility of dynamic dispatch.  For example if code is statically compiled it cannot take advantage of runtime metaprogramming enhancements which may be provided by plugins.{hidden}
スタティックコンパイルをするかどうかを決めるには注意が必要です。スタティックコンパイルする場合その利点も有りますが、それは柔軟なダイナミックディスパッチを諦める事にもなります。例えば、コードがスタティックコンパイルされている場合は、プラグイン等から提供されているランタイムメタプログラミングを使用した便利な機能の利点を受けられなくなります。


{hidden}
{note}
More notes on static compilation to be provided before the release of 2.4.0 final.
{note}

{hidden}
{note}
2.4.0の最終リリースまでに、さらなるスタティックコンパイル情報を提供する予定です
{note}