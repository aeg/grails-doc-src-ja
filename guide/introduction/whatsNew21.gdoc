{hidden}Maven Improvements / Multi Module Build Support{hidden}
h4. Maven機能向上 / Maven マルチモジュールビルド対応

{hidden}Grails' Maven support has been improved in a number of significant ways. Firstly it is now possible to specify plugins within your @pom.xml@ file:{hidden}
Grails Maven対応の幾つかの重要な部分が改善されました。初めに、@pom.xml@ファイルにプラグインを定義できるようになりました:


{code}
<dependency>
    <groupId>org.grails.plugins</groupId>
    <artifactId>hibernate</artifactId>
    <version>2.1.0</version>
    <type>zip</type>
    <scope>compile</scope>
</dependency>
{code}

{hidden}The Maven plugin now resolves plugins as well as jar dependencies (previously jar dependencies were resolved by Maven and plugins by Ivy). Ivy is completely disabled leaving all dependency resolution up to Maven ensuring that evictions work as expected.{hidden}
Mavenプラグインは今ではプラグインだけでなくjarファイルの依存関係も解決します(以前はjarファイルの依存関係はMavenが、プラグインはIvyが解決していました)。Mavenが期待通りに全ての依存関係解決を代わりに行えることを確かめる事を残しつつも、Ivyは完全に無効になっています。

{hidden}There is also a new Grails @create-multi-project-build@ script which features initial support for Maven (Gradle coming in a future release). This script can be run from a parent directory containing Grails applications and plugins and it will generate a Maven multi-module build.{hidden}
Grailsの新しい @create-multi-project-build@ スクリプトの機能もMavenを最初からサポートしています(Gradleは将来のリリースで登場します)。このスクリプトはGrailsアプリケーションとプラグインを含む親のディレクトリから実行可能で、Mavenのマルチモジュールビルドを生成します。

{hidden}Enabling Maven in a project has been made easier with the inclusion of the @create-pom@ command:{hidden}
@create-pom@コマンドが同包されたことにより、プロジェクトでMavenを有効にするのが簡単になりました:

{code}
grails create-app myapp
cd myapp
grails create-pom com.mycompany
mvn package
{code}

{hidden}To create a multi-module Maven build follow these steps:{hidden}
マルチモジュールのMaven buildを生成するには、これらのステップに従います:

{code}
grails create-app myapp
grails create-plugin plugin-a
grails create-plugin plugin-b
grails create-multi-project-build com.mycompany:parent:1.0-SNAPSHOT
mvn install
{code}

h4. Grailsラッパー {hidden}Grails Wrapper{hidden}

{hidden}The Grails Wrapper allows a Grails application to build without having to install Grails and configure a GRAILS_HOME environment variable.  The wrapper includes a small shell script and a couple of small bootstrap jar files that typically would be checked in to source code control along with the rest of the project.  The first time the wrapper is executed it will download and configure a Grails installation.  This wrapper makes it more simple to setup a development environment, configure CI and manage upgrades to future versions of Grails.  When the application is upgraded to the next version of Grails, the wrapper is updated and checked in to the source code control system and the next time developers update their workspace and run the wrapper, they will automatically be using the correct version of Grails.{hidden}
Grailsラッパーを用いれば、Grailsをインストールし環境変数GRAILS_HOMEを設定すること無くGrailsアプリケーションをビルドすることができます。ラッパーは小さなシェルスクリプトと、通常、プロジェクトのそれ以外のファイルと一緒にソースコード管理にチェックインされる幾つかの小さなブートストラップjarファイルを含んでいます。ラッパーが最初に起動されたときにGrailsをダウンロードして、Grailsのインストールが設定されます。このラッパーはCIを設定し、Grailsの将来のバージョンへの更新を管理することで、開発環境の設定をもっと簡単にします。アプリケーションがGrailsの次のバージョンにアップグレードされたとき、ラッパーは更新されソースコード管理システムにチェックインされ、次回開発者がワークスペースを更新しラッパーを実行したとき、彼らは自動的に正しいバージョンのGrailsを使うことになるでしょう。

{hidden}See the [Wrapper Documentation|guide:wrapper] for more details.{hidden}
詳細については[ラッパードキュメント|guide:wrapper]を参照してください。

h4. デバッグオプション{hidden}Debug Option{hidden}

{hidden}The @grails@ command now supports a @-debug@ option which will startup the remote debug agent.  This behavior used to be provided by the @grails-debug@ command.  @grails-debug@ is still available but is deprecated and may be removed from a future release.{hidden}
@grails@ コマンドは現在リモートデバッグエージェントを開始する @-debug@ オプションをサポートしています。この振る舞いは @grails-debug@ コマンドにより提供されていました。@grails-debug@ コマンドはまだ有効ですが、deprecatedの取り扱いであり、将来のリリースではたぶん削除されます。

{code}
grails -debug run-app
{code}

h4. Grailsコマンドエイリアス {hidden}Grails Command Aliases {hidden}

{hidden}The @alias@ command may be used to define aliases for grails commands.{hidden}
@alias@コマンドはgrailsコマンドのエイリアスを定義するのに使われます。

{hidden}The following command creates an alias named @rit@ (short for "run integration tests"):{hidden}
以下のコマンドでは、 @rit@ ("run integration tests"を短くしたもの)との名前のエイリアスを作成します。:

{code}
grails alias rit test-app integration:
{code}

{hidden}See the [alias|commandLine] docs for more info.{hidden}
さらなる情報についての文書は [エイリアス|commandLine] を参照してください。

h4.  キャッシュプラグイン {hidden}Cache Plugin {hidden}

{hidden}Grails 2.1 installs the [cache plugin|http://grails.org/plugin/cache] by default.  This plugin provides powerful and easy to use cache functionality to applications and plugins.  The main plugin provides basic map backed caching support.  For more robust caching options one of the implementation plugins should be installed and configured.  See the [cache-redis docs|http://grails-plugins.github.com/grails-cache-redis/] and the [cache-ehcache docs|http://grails-plugins.github.com/grails-cache-ehcache/] for details.{hidden}
Grails 2.1はデフォルトで[キャッシュプラグイン|http://grails.org/plugin/cache]をインストールします。このプラグインはアプリケーションとプラグインにパワフルで利用が簡単なキャッシュ機能を提供します。メインのプラグインは基本的なマップでのキャッシュをサポートします。もっと強固なキャッシュオプションが必要な場合には、プラグイン実装の一つをインストールし、設定する必要があります。詳細については[cache-redisドキュメント|http://grails-plugins.github.com/grails-cache-redis/]と[cache-ehcacheドキュメント|http://grails-plugins.github.com/grails-cache-ehcache/]を参照してください。

{hidden}See [the main plugin documentation|http://grails-plugins.github.com/grails-cache/] for details on how to configure and use the plugin.{hidden}
プラグインをどのように設定し、どのように利用するかの詳細については [プラグインメインドキュメント|http://grails-plugins.github.com/grails-cache/]を参照してください

h4. 新たなGORMメソッド {hidden}New GORM Methods {hidden}
{hidden}In Grails 2.1.1 domain classes now have static methods named @first@ and @last@ to retrieve the first and last instances from the datastore.  See the [first|domainClasses] and [last|domainClasses] documentation for details.{hidden}
Grails 2.1.1ではドメインクラスにおいて、@first@と@last@というスタティックメソッドがあり、データストアの最初と最後のインスタンスを取得することができます。詳細についての文書は [first|domainClasses]と[last|domainClasses]を参照してください。

