h4. Maven Improvements / Multi Module Build Support

Grails' Maven support has been improved in a number of significant ways. Firstly it is not possible to specify plugins within your @pom.xml@ file:

{code}
<dependency>
    <groupId>org.grails.plugins</groupId>
    <artifactId>hibernate</artifactId>
    <version>2.1.0.RC1</version>
    <type>zip</type>
    <scope>compile</scope>
</dependency>
{code}

The Maven plugin now resolves plugins as well as jars dependencies (previously jar dependencies were resolved by Maven and plugins by Ivy). Ivy is completely disabled leaving all dependency resolution up to Maven ensuring that evictions work as expected.

There is also a new Grails @create-multi-project-build@ script which features initial support for Maven (Gradle coming in a future release). This script can be run from a parent directory containing Grails applications and plugins and it will generate a Maven multi-module build.

Finally, the Maven plugin now features a forked execution mode so that Grails executions are forked into a separate JVM reducing memory strain on the Maven process.


h4. Grails Wrapper

The Grails Wrapper allows a Grails application to built without having to install Grails and configure a GRAILS_HOME environment variable.  The wrapper includes a small shell script and a couple of small bootstrap jar files that typically would be checked in to source code control along with the rest of the project.  The first time the wrapper is executed it will download and configure a Grails installation.  This wrapper makes it more simple to setup a development environment, configure CI and manage upgrades to future versions of Grails.  When the application is upgraded to the next version of Grails, the wrapper is updated and checked in to the source code control system and the next time developers update their workspace and run the wrapper, they will automatically be using the correct version of Grails.

See the [Wrapper Documentation|guide:wrapper] for more details.

h4. Cache Plugin

TODO